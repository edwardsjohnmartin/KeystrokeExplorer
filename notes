playback box
fix far-left and far-right arrows not working on (mac/safari/...?)
the old cache remains so loading new files keeps adding new cached items

bug fix with tchildren not being correct (module and when node types change [ie = to +=])
bug fix with splitting children
bug fix inserts and deletes on uncompilable states not carrying through to next state
  do-while loop at line 169 in temporalHierarchy
  playback(12-14) on test9.py

# first snapshot is error
# timeout on ast temporal generator taking too long

FAILED:
  STUDENT43, ASSIGN9, TASK1.py
  STUDENT44, ASSIGN10, TEST.PY
  STUDENT44, ASSIGN12, TASK2.PY


PRIORITY:
  get static parent for nodes

1.2
is struggle rate correlated with time taken and keystrokes made
  get number of 5min+ breaks, normalize by number of keystrokes. compare to struggle rate
  make a distribution to look at

2.x
detected what blocks were commented

3.0
do students who debug with print statements do better or worse?
  observation on few instances on this. we figure there would be more.
correlate with time taken, or throw away print calls that were deleted and all their temporal ancestors



FAILED (356 / 1083): Student22, Assign12, task3.py
FAILED (877 / 1083): Student40, Assign9, task1.py


Look at through time for students, if their for loops decrease over time.

Get examples of where parse trees are better than asts
  explain why Asts will not work for our objective
Email steve about fixing code highlighting
Finish up the remaining parsing


A parse tree is used to match input text whereas syntax trees record only the structure of the input text.
ASTs abstract away certain non-terminal tokens which makes attribution of code edits to the correct code structure impossible. For example, if you have an argument list inside of a function
  foo(x, y)
  and need to change it to
  foo(x  y)
  foo(x + y)
  the edits will be picked up as a variable edit and function edit when using ASTs. Changing the name 'foo' to 'fum' will also produce two function edits. These edits are quite different in the problem being solved, but an AST will suggest they are the same problem as the edit type is identical between them. Both have variables being changed, and both have function calls being changed.

#2) syntactical changes don't get picked up in AST